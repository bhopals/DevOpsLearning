
DevOps CONCEPTS:

1. Build Automation
--------------------------------------------------


What is Build Automation?
    • Build automation: automation of the process of preparing code for deployment to a live
         environment
    • Depending on what languages are used, code needs to be compiled, linted, minified, transformed,
        unit tested, etc.
    • Build automation means taking these steps and doing them in a consistent, automated way using a
        script or tool
    • The tools of build automation often differ depending on what programming languages and
        frameworks are used, but they have one thing in common: automation!


What does build automation look like?
    • Usually, build automation looks like running a command-line tool that builds code using
        configuration files and/or scripts that are treated as part of the source code
    • Build automation is independent of an IDE
    • Even if you can build within the IDE, it should be able to work the same way outside of the IDE
    • As much as possible, build automation should be agnostic of the configuration of the machine that it
        is built on
    • Your code should be able to build on someone else’s machine the same way it builds on yours




2. Continuous Integration
--------------------------------------------------
What is Continuous Integration?
    • Continuous Integration (CI):the practice of frequently merging code changes done by developers
    • Traditionally, developers would work separately, perhaps for weeks at a time, and then merge all of
        their work together at the end in one large effort
    • Continuous integration means merging constantly throughout the day, usually with the execution of
        automated tests to detect any problems caused by the merge
    • Merging all the time could be a lot of work, so to avoid that it should be automated!

CI Servers- Run the build + test cases (automated)
Broken Builds 


Why do Continuous Integration?
   -     Early detection of certain types of bugs – If code doesn’t compile or an automated test fails, the
            developers are notified and can fix it immediately. The sooner these bugs are detected, the easier they
            are to fix!
   -     Eliminate the scramble to integrate just before a big release – The code is constantly merged, so there is
            no need to do a big merge at the end.
    -   Makes frequent releases possible - Code is always in a state that can be deployed to production.
    -   Makes continuous testing possible – Since the code can always be run, QA testers can get their hands on
        it all throughout the development process, not just at the end.
    -   Encourages good coding practices – Frequent commits encourages simple, modular code.


3. Continuous Delivery and Continuous Deployment
--------------------------------------------------
What is Continuous Delivery?
    • Continuous Delivery (CD): the practice of continuously maintaining code in a deployable state
    • Regardless of whether or not the decision is made to deploy, the code is always in a state that is able
        to be deployed.
    • Some use the terms continuous delivery and continuous deployment interchangeably, or simply use
        the abbreviation CD;however, both are different.

What is Continuous Deployment?
    • Continuous Deployment: the practice of frequently deploying small code changes to production
    • Continuous delivery is keeping the code in a deployable state. Continuous deployment is actually
        doing the deployment frequently
    • Some companies that do continuous deployment deploy to production multiple times a day
    • There is no standard for how often you should deploy, but in general the more often you deploy the
        better!
    • With continuous deployment, deployments to production are routine and commonplace. They are
        not a big, scary event

4. Infrastructure as a Code (IaaC)
--------------------------------------------------

What is Infrastructure as Code?
    • Infrastructure as Code (IaC): manage and provision infrastructure through code and automation.
    • With infrastructure as code, instead of doing things manually, you use automation and code to
    create and change:
        - Servers
        - Instances
        - Environments
        - Containers
        - Other infrastructure


What does infrastructure as code look like?

    - Without infrastructure as code you might:
        - ssh into a host
        - Issue a series of commands to perform the change
    
    - With infrastructure as code:
        - Change some code or configuration files that can be used with an automation tool to perform changes
        - Commit them to source control
        - Use an automation tool to enact the changes defined in the code and/or configuration files

    - With IaC, provisioning new resources and changing existing resources are both done through
        automation


5. Configuration Management
--------------------------------------------------


6. Orchestration
--------------------------------------------------


7. Monitering
--------------------------------------------------



7. Microservices
--------------------------------------------------



VOCABS :

    Agnostic 