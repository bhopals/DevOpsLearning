
Understanding Docker Security
----------------------------------------

Kernel Namespaces 
    
    - Created when a container is run
    - Container processes cannot see or affect other processes
    - Each container has its own network stack 



Control Groups 
    
    - Created when a container is run
    - Provide resource accounting and limiting
    - Ensure no containers exhaust host resources 



Docker Daemon Attack Surface 

    - Attack surface is small, but takes appropriate security measures
    - Only run docker on a host 
    - Only let trusted users control the Docker Daemon 


Linux  Kernel Capabilities

    - Docker runs containers with restricted Capabilities
    - For example, even OS containers don't get full root priviliges.


https://docs.docker.com/engine/security/security/




SECURING DOCKER SWARM CLUSTER 
--------------------------------------

Mutually Authenticated TLS (MTLS) / Mutually Authenticated Transport Layer Security.

 - Manually rotating certificates is painful
 - Rotating Secutiry certificates without downtime is even harder
 - MTLS is built into Docker Swarm and solves these challenges



So here's how it works. 
    Built in to Docker Swarm clusters is a public key infrastructure, or PKI, that
     facilitates secure communication between all the nodes in the cluster. The nodes use MTLS for authentication, authorization, 
     and encryption of all communication. So when you first initialize your Docker Swarm cluster and the first
      node that comes online is a manager, that node has a built-in certificate authority, or CA, 
      that's created. From there, as you add new manager nodes, the key pair
       initially created is used for secure communication between future nodes. The first manager node also
        creates tokens to be used for workers or managers to join the cluster. In those tokens are a 
        digest of the root CA certificate and a randomly generated secret. On top 
        of the cluster is a universal control plane, or UCP, and then from there, you
         can run your applications securely and efficiently. Swarm managers are in constant communication with each other, 
         and the worker nodes talk to the managers. Every three months, each node in the cluster renews its
          certificate automatically using MTLS.


Managers v/s Workers

Swarm Manager
    - Maintain Cluster state 
    - Schedule Services 
    - Serve as Swarm HTTP API Endpoints
    
Swarm Workers
    - Sole purpose is to execute container workloads 


 If you're concerned that a Swarm node might be compromised in
  your cluster, you can easily run 
    "docker swarm ca --rotate"
 on any of the Swarm managers to immediately generate a new CA certificate and key
  that will be automatically distributed to all of the other
   managers and workers in the cluster using MTLS.



Secure Docker to Registry Communication 
---------------------------------------------